// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"ortisan-broker/go-commons/config"
	"ortisan-broker/go-commons/infrastructure/database"
	"ortisan-broker/go-commons/infrastructure/log"
	"ortisan-broker/go-sts-service/adapter/input/http"
	database2 "ortisan-broker/go-sts-service/adapter/output/database"
	"ortisan-broker/go-sts-service/application"
	"ortisan-broker/go-sts-service/domain/usecase"
)

// Injectors from di.go:

func ConfigRouters() (*gin.Engine, error) {
	clientCredentialsAdapter, err := application.NewClientCredentialsAdapter()
	if err != nil {
		return nil, err
	}
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	db, err := database.NewDB(configConfig)
	if err != nil {
		return nil, err
	}
	logger, err := log.NewLogger()
	if err != nil {
		return nil, err
	}
	databaseClientCredentialsAdapter, err := database2.NewClientCredentialsAdapter()
	if err != nil {
		return nil, err
	}
	clientCredentialsRepository, err := database2.NewClientCredentialsPostgresRepository(db, logger, databaseClientCredentialsAdapter)
	if err != nil {
		return nil, err
	}
	createClientCredentialsUseCase, err := usecase.NewCreateClientCredentialsUseCase(clientCredentialsRepository)
	if err != nil {
		return nil, err
	}
	createClientCredentialsApplication, err := application.NewCreateClientCredentialsApplication(clientCredentialsAdapter, createClientCredentialsUseCase)
	if err != nil {
		return nil, err
	}
	createClientCredentialsController, err := http.NewCreateClientCredentialsController(createClientCredentialsApplication)
	if err != nil {
		return nil, err
	}
	oauthTokenAdapter, err := application.NewOauthTokenAdapter()
	if err != nil {
		return nil, err
	}
	getClientCredentialsUseCase, err := usecase.NewGetClientCredentialsUseCase(clientCredentialsRepository)
	if err != nil {
		return nil, err
	}
	createOauthTokenUseCase, err := usecase.NewCreateOauthTokenUseCase(getClientCredentialsUseCase)
	if err != nil {
		return nil, err
	}
	createOauthTokenApplication, err := application.NewCreateOauthTokenApplication(oauthTokenAdapter, createOauthTokenUseCase)
	if err != nil {
		return nil, err
	}
	oauthTokenController, err := http.NewOauthTokenController(createOauthTokenApplication)
	if err != nil {
		return nil, err
	}
	engine, err := http.NewRouter(createClientCredentialsController, oauthTokenController)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

// di.go:

var ConfigSet = wire.NewSet(config.NewConfig)

var LoggerSet = wire.NewSet(log.NewLogger)

var DbSet = wire.NewSet(database.NewDB)

var RepositoriesSet = wire.NewSet(database2.NewClientCredentialsAdapter, database2.NewClientCredentialsPostgresRepository)

var UseCasesSet = wire.NewSet(usecase.NewCreateClientCredentialsUseCase, usecase.NewGetClientCredentialsUseCase, usecase.NewCreateOauthTokenUseCase)

var ApplicationsSet = wire.NewSet(application.NewClientCredentialsAdapter, application.NewCreateClientCredentialsApplication, application.NewOauthTokenAdapter, application.NewCreateOauthTokenApplication)

var ControllersSet = wire.NewSet(http.NewCreateClientCredentialsController, http.NewOauthTokenController)

var RoutersSet = wire.NewSet(http.NewRouter)

var AppSet = wire.NewSet(ConfigSet, LoggerSet, DbSet, RepositoriesSet, UseCasesSet, ApplicationsSet, ControllersSet, RoutersSet)
