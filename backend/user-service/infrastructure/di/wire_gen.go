// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"user-service/adapter/output/database"
	"user-service/application"
	"user-service/config"
	"user-service/domain/usecase"
	"user-service/infrastructure/datastore"
	"user-service/infrastructure/http/router"
)

// Injectors from wire.go:

func ConfigRouters() (*gin.Engine, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	db, err := datastore.NewDB(configConfig)
	if err != nil {
		return nil, err
	}
	createUser, err := database.NewCreateUserPostgresRepository(db)
	if err != nil {
		return nil, err
	}
	usecaseCreateUser, err := usecase.NewCreateUserUseCase(createUser)
	if err != nil {
		return nil, err
	}
	createUserApplication, err := application.NewCreateUserApplication(usecaseCreateUser)
	if err != nil {
		return nil, err
	}
	getUser, err := database.NewGetUserPostgresRepository(db)
	if err != nil {
		return nil, err
	}
	usecaseGetUser, err := usecase.NewGetUserUseCase(getUser)
	if err != nil {
		return nil, err
	}
	getUserApplication, err := application.NewGetUserApplication(usecaseGetUser)
	if err != nil {
		return nil, err
	}
	engine, err := router.NewRouter(createUserApplication, getUserApplication)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

// wire.go:

var ConfigSet = wire.NewSet(config.NewConfig)

var DbSet = wire.NewSet(datastore.NewDB)

var RepositoriesSet = wire.NewSet(database.NewCreateUserPostgresRepository, database.NewGetUserPostgresRepository)

var UseCasesSet = wire.NewSet(usecase.NewCreateUserUseCase, usecase.NewGetUserUseCase)

var ApplicationsSet = wire.NewSet(application.NewCreateUserApplication, application.NewGetUserApplication)

var RoutersSet = wire.NewSet(router.NewRouter)

var AppSet = wire.NewSet(ConfigSet, DbSet, RepositoriesSet, UseCasesSet, ApplicationsSet, RoutersSet)
